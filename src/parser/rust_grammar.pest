// Set up implicit rules for ignoring whitespace and comments.
WHITESPACE = _{ "\t" | "\n" | "\u{000B}" | "\u{000C}" | "\r" | " " | "\u{0085}" | "\u{200E}" | "\u{200F}" | "\u{2028}" | "\u{2029}" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)* ~ ("\n")) }

// Ref: https://doc.rust-lang.org/reference/identifiers.html
rust_identifier = { ((XID_START | "_") ~ (XID_CONTINUE)*) }

// A string value is a sequence of characters that do not contain a double 
// quote, unless the double quote is part of an escape sequence.
string_value = @{ (!(!"\\"{1} ~ "\"") ~ ANY)* }

// A string literal is a double quote, followed by a string value, followed by
// a double quote.
string_literal = { "\"" ~ string_value ~ (!"\\"{1} ~ "\"") }

// A silent string value is the same as a string value, but won't be captured
// by the parser.
silent_string_value = _{ (!(!"\\"{1} ~ "\"") ~ ANY)* }

// A silent string literal is the same as a string literal, but won't be 
// captured by the parser.
silent_string_literal = _{ "\"" ~ silent_string_value ~ (!"\\"{1} ~ "\"") }

// Rust log macros accept an optional target string argument 
// (https://docs.rs/log/latest/log/)
target_arg = _{ "target:" ~ silent_string_literal ~ "," }

// Optionally, log messages may be accompanied by key-value pairs using the 
// kv feature (https://docs.rs/log/latest/log/kv/index.html). When Breadlog is
// in structured mode, these must be parsed as reference IDs are stored as a 
// key-value pair; otherwise, they are parsed so they can be skipped to store
// the reference ID in the message string.
kvp_value = { (rust_identifier | string_literal | ASCII_DIGIT+) ~ ((string_literal | !("," | ";")) ~ ANY)* }

// Modifiers for key-value pairs are optional and are separated by a colon. 
// These are not used by Breadlog.
kvp_modifiers = _{ (":" ~ ("?" | "debug" | "%" | "display" | "err" | "sval" | "serde")) }

// A key-value pair is a key, followed by an optional modifier, followed by an
// optional equals sign and value. If the value is the last one in the set of
// key-value pairs, it is followed by a semicolon; otherwise, it is followed by
// a comma.
kvp_key = { rust_identifier }
kvp_args = { (kvp_key ~ kvp_modifiers{0, 1} ~ ("=" ~ kvp_value)? ~ ","?)+ ~ ";" }

// A macro statement is a macro name, followed by an exclamation mark, followed
// by a set of macro arguments enclosed in brackets.
macro_args = { "(" ~ target_arg? ~ kvp_args? ~ string_literal }
macro_name = { ((XID_START | "_") ~ (XID_CONTINUE ~ "::"?)*) }
log_macro = { macro_name ~ "!" ~ macro_args }

file =
{
    SOI ~
    (log_macro | ANY)* ~
    EOI
}